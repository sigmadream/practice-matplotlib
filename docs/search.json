[
  {
    "objectID": "tutorial/Hands-On_03.html",
    "href": "tutorial/Hands-On_03.html",
    "title": "Subplots",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndata = pd.read_csv(\"data/salary.csv\")\n\n\ndata.head()\n\n\n\n\n\n\n\n\nAge\nAll_Devs\nPython\nJavaScript\n\n\n\n\n0\n18\n17784\n20046\n16446\n\n\n1\n19\n16500\n17100\n16791\n\n\n2\n20\n18012\n20000\n18942\n\n\n3\n21\n20628\n24744\n21780\n\n\n4\n22\n25206\n30500\n25704\n\n\n\n\n\n\n\n\nages = data[\"Age\"]\ndev_salaries = data[\"All_Devs\"]\npy_salaries = data[\"Python\"]\njs_salaries = data[\"JavaScript\"]\n\n\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.plot(ages, js_salaries, label = \"JavaScript\")\nplt.plot(ages, dev_salaries, label = \"All_Devs\", linestyle = '--', color = \"black\")\nplt.title(\"Median Salaries in [USD] by Age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Salaries in USD\")\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nages = data[\"Age\"]\ndev_salaries = data[\"All_Devs\"]\npy_salaries = data[\"Python\"]\njs_salaries = data[\"JavaScript\"]\n\nfig, ax = plt.subplots()\n\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.plot(ages, js_salaries, label = \"JavaScript\")\nplt.plot(ages, dev_salaries, label = \"All_Devs\", linestyle = '--', color = \"black\")\nplt.title(\"Median Salaries in [USD] by Age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Salaries in USD\")\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 적용 객체를 변경\nages = data[\"Age\"]\ndev_salaries = data[\"All_Devs\"]\npy_salaries = data[\"Python\"]\njs_salaries = data[\"JavaScript\"]\n\nfig, ax = plt.subplots()\n\nax.plot(ages, py_salaries, label = \"Python\")\nax.plot(ages, js_salaries, label = \"JavaScript\")\nax.plot(ages, dev_salaries, label = \"All_Devs\", linestyle = '--', color = \"black\")\nax.set_title(\"Median Salaries in [USD] by Age\")\nax.set_xlabel(\"Age\")\nax.set_ylabel(\"Salaries in USD\")\nax.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nages = data[\"Age\"]\ndev_salaries = data[\"All_Devs\"]\npy_salaries = data[\"Python\"]\njs_salaries = data[\"JavaScript\"]\n\nfig, (ax1, ax2) = plt.subplots(nrows = 2, ncols=1)\n\nax2.plot(ages, py_salaries, label = \"Python\")\nax2.plot(ages, js_salaries, label = \"JavaScript\")\nax1.plot(ages, dev_salaries, label = \"All_Devs\", linestyle = '--', color = \"black\")\n\n\nax1.set_title(\"Median Salaries in [USD] by Age\")\nax1.set_xlabel(\"Age\")\nax1.set_ylabel(\"Salaries in USD\")\nax1.legend()\n\nax2.set_title(\"Median Salaries in [USD] by Age\")\nax2.set_xlabel(\"Age\")\nax2.set_ylabel(\"Salaries in USD\")\nax2.legend()\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 제목 및 xlabel 공유\nages = data[\"Age\"]\ndev_salaries = data[\"All_Devs\"]\npy_salaries = data[\"Python\"]\njs_salaries = data[\"JavaScript\"]\n\nfig, (ax1, ax2) = plt.subplots(nrows = 2, ncols=1)\n\nax2.plot(ages, py_salaries, label = \"Python\")\nax2.plot(ages, js_salaries, label = \"JavaScript\")\nax1.plot(ages, dev_salaries, label = \"All_Devs\", linestyle = '--', color = \"black\")\n\nax1.set_title(\"Median Salaries in [USD] by Age\")\nax1.set_ylabel(\"Salaries in USD\")\nax1.legend()\n\nax2.set_xlabel(\"Age\")\nax2.set_ylabel(\"Salaries in USD\")\nax2.legend()\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nages = data[\"Age\"]\ndev_salaries = data[\"All_Devs\"]\npy_salaries = data[\"Python\"]\njs_salaries = data[\"JavaScript\"]\n\nfig, (ax1, ax2) = plt.subplots(nrows = 2, ncols=1, sharex = True)\n\nax2.plot(ages, py_salaries, label = \"Python\")\nax2.plot(ages, js_salaries, label = \"JavaScript\")\nax1.plot(ages, dev_salaries, label = \"All_Devs\", linestyle = '--', color = \"black\")\n\nax1.set_title(\"Median Salaries in [USD] by Age\")\nax1.set_ylabel(\"Salaries in USD\")\nax1.legend()\n\nax2.set_xlabel(\"Age\")\nax2.set_ylabel(\"Salaries in USD\")\nax2.legend()\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nages = data[\"Age\"]\ndev_salaries = data[\"All_Devs\"]\npy_salaries = data[\"Python\"]\njs_salaries = data[\"JavaScript\"]\n\nfig1, ax1 = plt.subplots()\nfig2, ax2 = plt.subplots()\n\nax2.plot(ages, py_salaries, label = \"Python\")\nax2.plot(ages, js_salaries, label = \"JavaScript\")\nax1.plot(ages, dev_salaries, label = \"All_Devs\", linestyle = '--', color = \"black\")\n\nax1.set_title(\"Median Salaries in [USD] by Age\")\nax1.set_xlabel(\"Age\")\nax1.set_ylabel(\"Salaries in USD\")\nax1.legend()\n\nax2.set_title(\"Median Salaries in [USD] by Age\")\nax2.set_xlabel(\"Age\")\nax2.set_ylabel(\"Salaries in USD\")\nax2.legend()\n\nplt.tight_layout()",
    "crumbs": [
      "Home",
      "Subplots"
    ]
  },
  {
    "objectID": "tutorial/Hands-On_01.html",
    "href": "tutorial/Hands-On_01.html",
    "title": "Plotting one value on a single graph",
    "section": "",
    "text": "import matplotlib.pyplot as plt\ndev_x = [x for x in range(25,36,1)]\ndev_y = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752]\nplt.plot(dev_x, dev_y)\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Median Salary (USD)\")\n\nText(0, 0.5, 'Median Salary (USD)')",
    "crumbs": [
      "Home",
      "Plotting one value on a single graph"
    ]
  },
  {
    "objectID": "tutorial/Hands-On_01.html#plotting-two-values-on-a-single-graph",
    "href": "tutorial/Hands-On_01.html#plotting-two-values-on-a-single-graph",
    "title": "Plotting one value on a single graph",
    "section": "Plotting two values on a single graph",
    "text": "Plotting two values on a single graph\n\nage_x = dev_x\ndev_y = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752]\npydev_y = [45372, 48476, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640]\njsdev_y = [37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583]\n\n\nplt.plot(age_x, dev_y)\nplt.plot(age_x, pydev_y)\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\n\nText(0, 0.5, 'Median Salary (USD)')\n\n\n\n\n\n\n\n\n\n\n# Tip1: 플롯에 추가된 순서대로 목록을 전달하여 범례를 추가할 수 있습니다.\nplt.plot(age_x, dev_y)\nplt.plot(age_x, pydev_y)\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.legend([\"All_Developers\", \"Python_Developers\"])\n\n\n\n\n\n\n\n\n\n# Tip2: plt.plot()에 레이블 매개변수 추가하기\nplt.plot(age_x, dev_y, label = \"All_Developers\")\nplt.plot(age_x, pydev_y, label = \"Python_Developers\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nplt.plot(age_x, dev_y, \"k--\", label = \"All_Developers\")\nplt.plot(age_x, pydev_y, \"b-\",label = \"Python_Developers\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.legend()\n\n\n\n\n\n\n\n\n\n# 코드 가독성 높이기\nplt.plot(age_x, dev_y, color = \"k\", linestyle = \"--\", label = \"All_Developers\")\nplt.plot(age_x, pydev_y, color = \"b\", linestyle = '-', label = \"Python_Developers\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.legend()\n\n\n\n\n\n\n\n\n\n# 선에 마커 추가하기\nplt.plot(age_x, dev_y, color = \"k\", linestyle = \"--\", marker = \".\", label = \"All_Developers\")\nplt.plot(age_x, pydev_y, color = \"b\", linestyle = '-', marker = \"o\",label = \"Python_Developers\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nplt.plot(age_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.plot(age_x, pydev_y, color = \"#5a7d9a\", linestyle = '-',label = \"Python_Developers\")\nplt.plot(age_x, jsdev_y, color = \"#adad3b\", linestyle = '-',label = \"Java_script_Developers\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.legend()\n\n\n\n\n\n\n\n\n\n# 파이썬과 자바스크립트의 너비 변경하기\nplt.plot(age_x, pydev_y, color = \"#5a7d9a\", linestyle = '-',linewidth = 4, label = \"Python_Developers\")\nplt.plot(age_x, jsdev_y, color = \"#adad3b\", linestyle = '-',linewidth = 4, label = \"Java_script_Developers\")\nplt.plot(age_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.legend()\n\n\n\n\n\n\n\n\n\n# 그래프에 패딩 추가\nplt.plot(age_x, pydev_y, color = \"#5a7d9a\", linestyle = '-',linewidth = 4, label = \"Python_Developers\")\nplt.plot(age_x, jsdev_y, color = \"#adad3b\", linestyle = '-',linewidth = 4, label = \"Java_script_Developers\")\nplt.plot(age_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 플롯에 그리드 추가\nplt.plot(age_x, pydev_y, color = \"#5a7d9a\", linestyle = '-',linewidth = 4, label = \"Python_Developers\")\nplt.plot(age_x, jsdev_y, color = \"#adad3b\", linestyle = '-',linewidth = 4, label = \"Java_script_Developers\")\nplt.plot(age_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.legend()\nplt.tight_layout()\nplt.grid(True)",
    "crumbs": [
      "Home",
      "Plotting one value on a single graph"
    ]
  },
  {
    "objectID": "tutorial/Hands-On_01.html#using-style",
    "href": "tutorial/Hands-On_01.html#using-style",
    "title": "Plotting one value on a single graph",
    "section": "Using Style!",
    "text": "Using Style!\n\n# 사용 가능한 스타일\nplt.style.available\n\n['Solarize_Light2',\n '_classic_test_patch',\n '_mpl-gallery',\n '_mpl-gallery-nogrid',\n 'bmh',\n 'classic',\n 'dark_background',\n 'fast',\n 'fivethirtyeight',\n 'ggplot',\n 'grayscale',\n 'seaborn-v0_8',\n 'seaborn-v0_8-bright',\n 'seaborn-v0_8-colorblind',\n 'seaborn-v0_8-dark',\n 'seaborn-v0_8-dark-palette',\n 'seaborn-v0_8-darkgrid',\n 'seaborn-v0_8-deep',\n 'seaborn-v0_8-muted',\n 'seaborn-v0_8-notebook',\n 'seaborn-v0_8-paper',\n 'seaborn-v0_8-pastel',\n 'seaborn-v0_8-poster',\n 'seaborn-v0_8-talk',\n 'seaborn-v0_8-ticks',\n 'seaborn-v0_8-white',\n 'seaborn-v0_8-whitegrid',\n 'tableau-colorblind10']\n\n\n\n# 'fivethirtyeight'\nplt.style.use('fivethirtyeight')\nplt.plot(age_x, pydev_y, linestyle = '-', label = \"Python_Developers\")\nplt.plot(age_x, jsdev_y, linestyle = '-', label = \"Java_script_Developers\")\nplt.plot(age_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 'ggplot'\nplt.style.use('ggplot')\nplt.plot(age_x, pydev_y, linestyle = '-', label = \"Python_Developers\")\nplt.plot(age_x, jsdev_y, linestyle = '-', label = \"Java_script_Developers\")\nplt.plot(age_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.legend()\nplt.tight_layout()",
    "crumbs": [
      "Home",
      "Plotting one value on a single graph"
    ]
  },
  {
    "objectID": "tutorial/Hands-On_01.html#recap",
    "href": "tutorial/Hands-On_01.html#recap",
    "title": "Plotting one value on a single graph",
    "section": "Recap",
    "text": "Recap\n\nages_x = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n          36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]\n\npy_dev_y = [20046, 17100, 20000, 24744, 30500, 37732, 41247, 45372, 48876, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640, 84666,\n            84392, 78254, 85000, 87038, 91991, 100000, 94796, 97962, 93302, 99240, 102736, 112285, 100771, 104708, 108423, 101407, 112542, 122870, 120000]\n\njs_dev_y = [16446, 16791, 18942, 21780, 25704, 29000, 34372, 37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583, 79000,\n            78508, 79996, 80403, 83820, 88833, 91660, 87892, 96243, 90000, 99313, 91660, 102264, 100000, 100000, 91660, 99240, 108000, 105000, 104000]\n\ndev_y = [17784, 16500, 18012, 20628, 25206, 30252, 34368, 38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752, 77232,\n         78000, 78508, 79536, 82488, 88935, 90000, 90056, 95000, 90000, 91633, 91660, 98150, 98964, 100000, 98988, 100000, 108923, 105000, 103117]\nplt.plot(ages_x, py_dev_y, linestyle = '-', label = \"Python_Developers\")\nplt.plot(ages_x, js_dev_y, linestyle = '-', label = \"Java_script_Developers\")\nplt.plot(ages_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nages_x = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, \n          36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]\n\npy_dev_y = [20046, 17100, 20000, 24744, 30500, 37732, 41247, 45372, 48876, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640, 84666,\n            84392, 78254, 85000, 87038, 91991, 100000, 94796, 97962, 93302, 99240, 102736, 112285, 100771, 104708, 108423, 101407, 112542, 122870, 120000]\n\njs_dev_y = [16446, 16791, 18942, 21780, 25704, 29000, 34372, 37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583, 79000,\n            78508, 79996, 80403, 83820, 88833, 91660, 87892, 96243, 90000, 99313, 91660, 102264, 100000, 100000, 91660, 99240, 108000, 105000, 104000]\n\ndev_y = [17784, 16500, 18012, 20628, 25206, 30252, 34368, 38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752, 77232,\n         78000, 78508, 79536, 82488, 88935, 90000, 90056, 95000, 90000, 91633, 91660, 98150, 98964, 100000, 98988, 100000, 108923, 105000, 103117]\nplt.style.use(\"ggplot\")\nplt.plot(ages_x, py_dev_y, linestyle = '-', label = \"Python_Developers\")\nplt.plot(ages_x, js_dev_y, linestyle = '-', label = \"Java_script_Developers\")\nplt.plot(ages_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nages_x = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n          36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]\npy_dev_y = [20046, 17100, 20000, 24744, 30500, 37732, 41247, 45372, 48876, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640, 84666,\n            84392, 78254, 85000, 87038, 91991, 100000, 94796, 97962, 93302, 99240, 102736, 112285, 100771, 104708, 108423, 101407, 112542, 122870, 120000]\njs_dev_y = [16446, 16791, 18942, 21780, 25704, 29000, 34372, 37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583, 79000,\n            78508, 79996, 80403, 83820, 88833, 91660, 87892, 96243, 90000, 99313, 91660, 102264, 100000, 100000, 91660, 99240, 108000, 105000, 104000]\ndev_y = [17784, 16500, 18012, 20628, 25206, 30252, 34368, 38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752, 77232,\n         78000, 78508, 79536, 82488, 88935, 90000, 90056, 95000, 90000, 91633, 91660, 98150, 98964, 100000, 98988, 100000, 108923, 105000, 103117]\nplt.style.use(\"fivethirtyeight\")\nplt.plot(ages_x, py_dev_y, linestyle = '-', label = \"Python_Developers\")\nplt.plot(ages_x, js_dev_y, linestyle = '-', label = \"Java_script_Developers\")\nplt.plot(ages_x, dev_y, color = \"#444444\", linestyle = \"--\", label = \"All_Developers\")\nplt.title(\"Median Salary (USD) by Age\")\nplt.xlabel(\"Ages\")\nplt.ylabel(\"Median Salary (USD)\")\nplt.legend()\nplt.tight_layout()",
    "crumbs": [
      "Home",
      "Plotting one value on a single graph"
    ]
  },
  {
    "objectID": "note/part_02.html",
    "href": "note/part_02.html",
    "title": "Axis Attributes",
    "section": "",
    "text": "기본적으로 (0,0)과 (1,1) 사이의 정사각형 영역을 그리는 것을 볼 수 있습니다. 하지만 가로세로비가 1이 아닙니다. 가로세로비는 높이와 너비의 비율인데, set_aspect()를 사용하여 변경할 수 있습니다.\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport numpy as np\nimport pandas as pd\n\nfig, ax = plt.figure(), plt.axes()\n# ax.set_aspect(1)\n\nset_xlim() 및 set_ylim()을 사용하여 최소값과 최대값을 설정할 수 있습니다. 만약, 최소/최대값을 명시적으로 설정하지 않으면 데이터에 따라 최대/최소값을 설정합니다. 당연히 해당 값은 get_xlim() 및 get_ylim() 메서드를 사용하여 확인할 수 있습니다. 최대/최소값에 따라서 차트 요소가 잘립니다. 설정을 통해서 차트 요소를 출력할 수 있지만, 권장하진 않습니다.\n\nfig, ax = plt.figure(), plt.axes()\nax.set_aspect(1)\n\nu = np.linspace(0,2*np.pi,100)\nx = np.cos(u)\ny = np.sin(u)\n\nax.plot(x-1, y)\n\nax.plot(x+1, y, clip_on = False)\n\nax.set_xlim(-1,1)",
    "crumbs": [
      "Home",
      "Axis Attributes"
    ]
  },
  {
    "objectID": "note/part_02.html#axis-aspect-and-limits",
    "href": "note/part_02.html#axis-aspect-and-limits",
    "title": "Axis Attributes",
    "section": "",
    "text": "기본적으로 (0,0)과 (1,1) 사이의 정사각형 영역을 그리는 것을 볼 수 있습니다. 하지만 가로세로비가 1이 아닙니다. 가로세로비는 높이와 너비의 비율인데, set_aspect()를 사용하여 변경할 수 있습니다.\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport numpy as np\nimport pandas as pd\n\nfig, ax = plt.figure(), plt.axes()\n# ax.set_aspect(1)\n\nset_xlim() 및 set_ylim()을 사용하여 최소값과 최대값을 설정할 수 있습니다. 만약, 최소/최대값을 명시적으로 설정하지 않으면 데이터에 따라 최대/최소값을 설정합니다. 당연히 해당 값은 get_xlim() 및 get_ylim() 메서드를 사용하여 확인할 수 있습니다. 최대/최소값에 따라서 차트 요소가 잘립니다. 설정을 통해서 차트 요소를 출력할 수 있지만, 권장하진 않습니다.\n\nfig, ax = plt.figure(), plt.axes()\nax.set_aspect(1)\n\nu = np.linspace(0,2*np.pi,100)\nx = np.cos(u)\ny = np.sin(u)\n\nax.plot(x-1, y)\n\nax.plot(x+1, y, clip_on = False)\n\nax.set_xlim(-1,1)",
    "crumbs": [
      "Home",
      "Axis Attributes"
    ]
  },
  {
    "objectID": "note/part_02.html#axis-lines-and-spines",
    "href": "note/part_02.html#axis-lines-and-spines",
    "title": "Axis Attributes",
    "section": "Axis Lines and Spines",
    "text": "Axis Lines and Spines\n기본적으로 차트를 둘러싸인 선을 스파인(spines)이라고 합니다. 플롯에서와 같이 y=0 및 x=0의 일반적인 x축 및 y축 선에 익숙한 경우 기본값이 어색할 수도 있습니다.\n\nfig, ax = plt.figure(), plt.axes()\nax.set_title(\"Zero Spines and Arrows\")\nax.plot([-1,1], [-1,1])\n\nfor spine in 'top',  'right':\n    ax.spines[spine].set_visible(False)\n\nfor spine in 'bottom',  'left':\n    ax.spines[spine].set_position('zero')\n\nxlims = ax.get_xlim()\nylims = ax.get_ylim()\n\nax.plot(xlims[1], 0, \"&gt;k\", clip_on = False)\nax.plot(0, ylims[1], \"^k\", clip_on = False)\n\nax.set_xlim(xlims)\nax.set_ylim(ylims)",
    "crumbs": [
      "Home",
      "Axis Attributes"
    ]
  },
  {
    "objectID": "note/part_02.html#ticks",
    "href": "note/part_02.html#ticks",
    "title": "Axis Attributes",
    "section": "Ticks",
    "text": "Ticks\n눈금(tick)에 중요한 ax 메서드는 set_xticks, set_xticklabels 등을 활용할 수 있습니다.\n\nfig, ax = plt.figure(), plt.axes()\nx = np.arange(10, 30, 1)\ny = np.random.normal(size = len(x))\nax.plot(x,y)\n\nax.xaxis.set_ticks(x)\n\n# ax.yaxis.tick_right()\n# ax.xaxis.set_ticks_position('top')\n\nax.set_title(\"Plot #5\")",
    "crumbs": [
      "Home",
      "Axis Attributes"
    ]
  },
  {
    "objectID": "note/part_02.html#grids",
    "href": "note/part_02.html#grids",
    "title": "Axis Attributes",
    "section": "Grids",
    "text": "Grids\n플롯에 격자선을 포함하는 것은 일반적으로 권장하지 않습니다. 격자선과 눈금의 위치는 set_major_locator() 및 set_minor_locator() 메서드로 설정할 수 있습니다.\n\nfig, ax = plt.figure(), plt.axes()\nax.xaxis.grid(False)\nax.yaxis.grid(True, linewidth = 3)\nax.yaxis.grid(True, which = 'minor', linewidth = 0.5)\nax.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(.1))",
    "crumbs": [
      "Home",
      "Axis Attributes"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Matplotlib 기초",
    "section": "",
    "text": "PNU에서 진행된 공학작문에 사용된 Matplotlib 관련 기초 Hands-On 입니다. 조금 더 전문적인 Hands-On이 필요하시면 Matplotlib에서 제공하는 튜토리얼1을 확인하세요.\n주된 내용은 Seaborn 등과 같은 응용 라이브러리를 사용하기전에 알아두면 좋을 내용입니다. 실습은 Google Colab을 활용하시면 손쉽게 가능합니다."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Matplotlib 기초",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://matplotlib.org/stable/tutorials/index↩︎"
  },
  {
    "objectID": "note/part_01.html",
    "href": "note/part_01.html",
    "title": "Figure, Axes",
    "section": "",
    "text": "Matplotlib는 MATLAB과 객체지향 두 가지 코드 스타일을 제공합니다. 대부분의 Matplotlib 사용자는 객체지향 스타일을 좋아하진 않습니다. 그럼에도 불구하고 우리가 객체지향 스타일을 사용하는 이유는 당연히 더 많은 일을 할 수 있기 때문입니다.\n대표적인 MATLAB 스타일은 아래와 같습니다.\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nx = (1,0)\ny = (0,1)\n\nplt.plot(x,y)\nplt.title(\"Plot #1\")\n객체지향 스타일은 아래와 같습니다.\nfig, ax = plt.figure(), plt.axes()\n\nax.plot(x,y)\nax.set_title(\"Plot #2\")\n객체지향 스타일을 사용하면 당연히 코드 및 학습량이 늘어날 것이라는 것은 자명합니다.\n해당 수업에서 객체지향에 대한 “메서드”를 탐구하는 것보다 주요 속성과 방법을 소개하고 빠르게 우리가 원하는 결과를 활용할 수 있도록 가능하면 핵심적인 내용을 위주로 다루도록 하겠습니다.",
    "crumbs": [
      "Home",
      "Figure, Axes"
    ]
  },
  {
    "objectID": "note/part_01.html#figure-axes",
    "href": "note/part_01.html#figure-axes",
    "title": "Figure, Axes",
    "section": "Figure, Axes",
    "text": "Figure, Axes\n플롯(Plot)를 표현하기 위해선 Figure와 Axes 객체가 필요하며, 이 두 객체를 사용해서 플롯이 정의됩니다. Figure 객체는 모든 플롯의 최상위 객체이자, 컨테이너입니다. Axes 객체는 플롯의 세부사항을 표현하기 때문에, 일반적으로 초기에 생성된 객체에 속성을 추가하는 방법으로 코드가 진행됩니다.\n\nfig = plt.figure(figsize = (2,3), facecolor = 'gray')\nax = plt.axes(facecolor = 'lightyellow')\n\nAxes 객체는 관례상 ax로 불리며, 핵심 객체입니다. 따라서, Matplotlib를 사용함에 있어서 fig와 ax 중 어떤 객체를 활용해야 하는지 세심하게 살펴봐야 합니다.\n\nx = np.linspace(0,1,2)\n\nfig, ax = plt.figure(figsize = (8,4)), plt.axes()\n\nax.plot(x, x)\nax.plot(x, 1 - x)\nax.set_title(\"Plot #3\")\nprint(ax.title)\nprint(ax.get_title()) \nax.set_title(\"Plot #4\")\nprint(ax.get_title())\n\nAxes의 set_xlim() 및 get_xlim()은 set_title() 및 get_title()처럼 동작하지만, ax.xlim으로 간단히 액세스할 수 있는 속성이 없으므로 getter와 setter에 의존하고 있다는 점도 유의해야합니다1.\n아래와 같은 형태의 코드 스타일이 대표적인 객체지향 형태의 코드입니다.\n\nfig, ax = plt.figure(figsize = (8,5)), plt.axes()\n\nx = np.linspace(0,100,2)\nax.plot(x, x, color = 'gray')\n\nax.set_xlim([0,100])\nax.set_ylim([0,100])\n\nfor i in range(101):\n    plt.axvline(i,0, i / 100, color = 'C' + str(i))\n    plt.axvline(i, i/100, 1, color = 'C' + str(i+5))\n\nplt.axis('off')\nplt.savefig('colorful.pdf')\n\n이런 특성을 반영하여, 아래와 같이 응용할 수 있습니다.\n\nfrom sklearn.datasets import load_iris\ndata = load_iris()['data']\ndf = pd.DataFrame(data)\n\nfig, ax = plt.figure(), plt.axes()\n\ndf.plot.box(ax = ax)\nax.yaxis.grid(True)\nax.xaxis.grid(False)\n\nplt.tight_layout()\nplt.savefig('irisbox.pdf')",
    "crumbs": [
      "Home",
      "Figure, Axes"
    ]
  },
  {
    "objectID": "note/part_01.html#footnotes",
    "href": "note/part_01.html#footnotes",
    "title": "Figure, Axes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ngetter와 setter는 Pythonic 하지 않습니다.↩︎",
    "crumbs": [
      "Home",
      "Figure, Axes"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "tutorial/Hands-On_02.html",
    "href": "tutorial/Hands-On_02.html",
    "title": "Bar",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nages_x = [25,26,27,28,29,30,31,32,33,34,35]\ndev_y = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752]\nplt.style.use(\"ggplot\")\nplt.plot(ages_x, dev_y, color = \"k\", linestyle = \"--\", label = \"Normal developers\")\nplt.title(\"Median Salaries by Age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Median of Salaries\")\nplt.legend()\nplt.tight_layout()\nages_x = [25,26,27,28,29,30,31,32,33,34,35]\ndev_y = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752]\nplt.style.use(\"ggplot\")\nplt.bar(ages_x, dev_y, color = \"k\", linestyle = \"--\", label = \"Normal developers\")\nplt.title(\"Median Salaries by Age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Median Salaries (USD)\")\nplt.legend()\nplt.tight_layout()\nages_x = [25,26,27,28,29,30,31,32,33,34,35]\ndev_y = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752]\npy_dev_y = [45372, 48476, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640]\njs_dev_y = [37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583]\nplt.style.use(\"ggplot\")\nplt.plot(ages_x, py_dev_y, color = \"#5a7d9a\", linestyle = '-',linewidth = 4, label = \"Python_Developers\")\nplt.plot(ages_x, js_dev_y, color = \"#adad3b\", linestyle = '-',linewidth = 4, label = \"Java_script_Developers\")\nplt.bar(ages_x, dev_y, color = \"k\", linestyle = \"--\", label = \"Normal developers\")\nplt.title(\"Median Salaries by Age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Median Salaries (USD)\")\nplt.legend()\nplt.tight_layout()",
    "crumbs": [
      "Home",
      "Bar"
    ]
  },
  {
    "objectID": "tutorial/Hands-On_02.html#line",
    "href": "tutorial/Hands-On_02.html#line",
    "title": "Bar",
    "section": "Line",
    "text": "Line\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndata = pd.read_csv(\"data/salary.csv\")\ndata.head()\n\n\n\n\n\n\n\n\nAge\nAll_Devs\nPython\nJavaScript\n\n\n\n\n0\n18\n17784\n20046\n16446\n\n\n1\n19\n16500\n17100\n16791\n\n\n2\n20\n18012\n20000\n18942\n\n\n3\n21\n20628\n24744\n21780\n\n\n4\n22\n25206\n30500\n25704\n\n\n\n\n\n\n\n\nages = data[\"Age\"]\ndev_salaries = data[\"All_Devs\"]\npy_salaries = data[\"Python\"]\njs_salaries = data[\"JavaScript\"]\n\n\nplt.style.use(\"ggplot\")\nplt.plot(ages, dev_salaries, color = \"#444444\", linestyle = '--', label = \"All Devs\")\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 채우기\nplt.style.use(\"ggplot\")\nplt.plot(ages, dev_salaries, color = \"#444444\", linestyle = '--', label = \"All Devs\")\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.fill_between(ages, py_salaries)\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nplt.style.use(\"ggplot\")\nplt.plot(ages, dev_salaries, color = \"#444444\", linestyle = '--', label = \"All Devs\")\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.fill_between(ages, py_salaries, alpha = 0.5)\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\noverall_median = 57287\nplt.style.use(\"ggplot\")\nplt.plot(ages, dev_salaries, color = \"#444444\", linestyle = '--', label = \"All Devs\")\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.fill_between(ages, py_salaries, overall_median, where=(py_salaries &gt; overall_median), interpolate = True, alpha = 0.5)\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\noverall_median = 57287\nplt.style.use(\"ggplot\")\nplt.plot(ages, dev_salaries, color = \"#444444\", linestyle = '--', label = \"All Devs\")\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.fill_between(ages, py_salaries, overall_median, where=(py_salaries &gt; overall_median), interpolate = True, alpha = 0.5)\nplt.fill_between(ages, py_salaries, overall_median, where = (py_salaries &lt; overall_median), interpolate = True, alpha = 0.25)\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 채우기 색상 사용자 지정\nplt.style.use(\"ggplot\")\nplt.plot(ages, dev_salaries, color = \"#444444\", linestyle = '--', label = \"All Devs\")\nplt.plot(ages, py_salaries, label = \"Python\")\noverall_median = 57287\nplt.fill_between(ages, py_salaries, overall_median, where=(py_salaries &gt; overall_median), interpolate = True, alpha = 0.5)\nplt.fill_between(ages, py_salaries, overall_median, where=(py_salaries &lt; overall_median), color = \"green\", interpolate = True, alpha = 0.25)\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\noverall_median = 57287\nplt.style.use(\"ggplot\")\nplt.plot(ages, dev_salaries, color = \"#444444\", linestyle = '--', label = \"All Devs\")\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.fill_between(ages, py_salaries, dev_salaries, where = (py_salaries &gt; dev_salaries), interpolate = True, alpha = 0.5)\nplt.fill_between(ages, py_salaries, overall_median, where = (py_salaries &lt; dev_salaries), color = \"green\", interpolate = True, alpha = 0.25)\nplt.legend()\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\noverall_median = 57287\nplt.style.use(\"ggplot\")\nplt.plot(ages, dev_salaries, color = \"#444444\", linestyle = '--', label = \"All Devs\")\nplt.plot(ages, py_salaries, label = \"Python\")\nplt.fill_between(ages, py_salaries, dev_salaries, where = (py_salaries &gt; dev_salaries), interpolate = True, alpha = 0.5, label = \"above dev_sal\")\nplt.fill_between(ages, py_salaries, overall_median, where = (py_salaries &lt; dev_salaries), color = \"green\", interpolate = True, alpha = 0.25, label = \"below dev_sal\")\nplt.legend()\nplt.tight_layout()",
    "crumbs": [
      "Home",
      "Bar"
    ]
  },
  {
    "objectID": "tutorial/Hands-On_02.html#scatter-plots",
    "href": "tutorial/Hands-On_02.html#scatter-plots",
    "title": "Bar",
    "section": "Scatter Plots",
    "text": "Scatter Plots\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nx = [5,7,8,5,6,7,9,2,3,4,4,4,2,6,3,6,8,6,4,1]\ny = [7,4,3,9,1,3,2,5,2,4,8,7,1,6,4,9,7,7,5,1]\nplt.scatter(x,y)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nCustomizing the scatter plots\n\n# 점의 크기 변경\nx = [5,7,8,5,6,7,9,2,3,4,4,4,2,6,3,6,8,6,4,1]\ny = [7,4,3,9,1,3,2,5,2,4,8,7,1,6,4,9,7,7,5,1]\nplt.scatter(x,y, s = 200)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 점의 색상 변경\nx = [5, 7, 8, 5, 6, 7, 9, 2, 3, 4, 4, 4, 2, 6, 3, 6, 8, 6, 4, 1]\ny = [7, 4, 3, 9, 1, 3, 2, 5, 2, 4, 8, 7, 1, 6, 4, 9, 7, 7, 5, 1]\nplt.scatter(x, y, s=150, color=\"green\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 그래프의 마커 변경하기\nx = [5,7,8,5,6,7,9,2,3,4,4,4,2,6,3,6,8,6,4,1]\ny = [7,4,3,9,1,3,2,5,2,4,8,7,1,6,4,9,7,7,5,1]\nplt.scatter(x,y, s = 150, color = \"green\", marker = \"X\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 마커에 가장자리와 알파값 부여하기\nx = [5,7,8,5,6,7,9,2,3,4,4,4,2,6,3,6,8,6,4,1]\ny = [7,4,3,9,1,3,2,5,2,4,8,7,1,6,4,9,7,7,5,1]\nplt.scatter(x,y, s = 150, c = \"green\", edgecolor = \"black\", linewidth = 2, alpha = 0.75)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n\nUsing differnt colors for markers.\n\nx = [5,7,8,5,6,7,9,2,3,4,4,4,2,6,3,6,8,6,4,1]\ny = [7,4,3,9,1,3,2,5,2,4,8,7,1,6,4,9,7,7,5,1]\ncolors = [7,5,3,9,5,7,2,5,3,7,1,2,8,1,9,2,5,6,7,5]\nplt.scatter(x,y, s = 150, c = colors, cmap = \"Reds\", edgecolor = \"black\", linewidth = 2, alpha = 0.75)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# Setting a colorbar legend\nx = [5, 7, 8, 5, 6, 7, 9, 2, 3, 4, 4, 4, 2, 6, 3, 6, 8, 6, 4, 1]\ny = [7, 4, 3, 9, 1, 3, 2, 5, 2, 4, 8, 7, 1, 6, 4, 9, 7, 7, 5, 1]\ncolors = [7, 5, 3, 9, 5, 7, 2, 5, 3, 7, 1, 2, 8, 1, 9, 2, 5, 6, 7, 5]\nplt.scatter(\n    x, y, s=150, c=colors, cmap=\"Reds\", edgecolor=\"black\", linewidth=2, alpha=0.75\n)\ncbar = plt.colorbar()\ncbar.set_label(\"Satisfaction Ratings\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nx = [5,7,8,5,6,7,9,2,3,4,4,4,2,6,3,6,8,6,4,1]\ny = [7,4,3,9,1,3,2,5,2,4,8,7,1,6,4,9,7,7,5,1]\ncolors = [7,5,3,9,5,7,2,5,3,7,1,2,8,1,9,2,5,6,7,5]\nsizes = [209,486,381,255,717,315,175,228,174,592,293,399,255,525,154,253,475,457,214,253]\nplt.scatter(x,y, s = sizes, c = colors, cmap = \"Reds\", edgecolor = \"black\", linewidth = 2, alpha = 0.75)\ncbar = plt.colorbar()\ncbar.set_label(\"Satisfaction Ratings\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n\nScatter plot for a CSV file data\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndata =  pd.read_csv(\"data/yt.csv\")\ndata.head()\n\n\n\n\n\n\n\n\nview_count\nlikes\nratio\n\n\n\n\n0\n8036001\n324742\n96.91\n\n\n1\n9378067\n562589\n98.19\n\n\n2\n2182066\n273650\n99.38\n\n\n3\n6525864\n94698\n96.25\n\n\n4\n9481284\n582481\n97.22\n\n\n\n\n\n\n\n\n# 조회 수에 따라 좋아요 수가 증가하는지 확인\n\nviews = data[\"view_count\"]\nlikes = data[\"likes\"]\nratio = data[\"ratio\"]\n\nplt.scatter(views, likes, edgecolor = \"black\", linewidth = 2, alpha = 0.75)\n\nplt.title(\"Trending Youtube videos\")\nplt.xlabel(\"Number of views\")\nplt.ylabel(\"Number of likes\")\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nviews = data[\"view_count\"]\nlikes = data[\"likes\"]\nratio = data[\"ratio\"]\n\nplt.scatter(views, likes, edgecolor = \"black\", linewidth = 2, alpha = 0.75)\n\nplt.title(\"Trending Youtube videos\")\nplt.xlabel(\"Number of views\")\nplt.ylabel(\"Number of likes\")\n\nplt.xscale(\"log\")\nplt.yscale(\"log\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# 좋아요/싫어요 비율을 색상 매개변수로 사용하여 데이터를 더 잘 설명할 수 있음\n\nviews = data[\"view_count\"]\nlikes = data[\"likes\"]\nratio = data[\"ratio\"]\n\nplt.scatter(views, likes, c = ratio, cmap = \"summer\", edgecolor = \"black\", linewidth = 2, alpha = 0.75)\n\ncbar = plt.colorbar()\ncbar.set_label(\"Like to Dislike Ratio\")\n\nplt.title(\"Trending Youtube videos\")\nplt.xlabel(\"Number of views\")\nplt.ylabel(\"Number of likes\")\n\nplt.xscale(\"log\")\nplt.yscale(\"log\")\nplt.tight_layout()",
    "crumbs": [
      "Home",
      "Bar"
    ]
  },
  {
    "objectID": "tutorial/Hands-On_02.html#plotting-time-series-data",
    "href": "tutorial/Hands-On_02.html#plotting-time-series-data",
    "title": "Bar",
    "section": "Plotting Time Series Data",
    "text": "Plotting Time Series Data\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mpl_dates\nfrom datetime import datetime, timedelta\n\n\ndate = [\n    datetime (2019,5,24),\n    datetime (2019,5,25),\n    datetime (2019,5,26),\n    datetime (2019,5,27),\n    datetime (2019,5,28),\n    datetime (2019,5,29),\n    datetime (2019,5,30)\n]\n\ny = [0,1,3,4,6,5,7]\n\nplt.plot(date, y)\n\n\n\n\n\n\n\n\n\ndate = [\n    datetime (2019,5,24),\n    datetime (2019,5,25),\n    datetime (2019,5,26),\n    datetime (2019,5,27),\n    datetime (2019,5,28),\n    datetime (2019,5,29),\n    datetime (2019,5,30)\n]\n\ny = [0,1,3,4,6,5,7]\n\nplt.plot(date, y, linestyle = \"solid\")\n\n\n\n\n\n\n\n\n\ndate = [\n    datetime (2019,5,24),\n    datetime (2019,5,25),\n    datetime (2019,5,26),\n    datetime (2019,5,27),\n    datetime (2019,5,28),\n    datetime (2019,5,29),\n    datetime (2019,5,30)\n]\n\ny = [0,1,3,4,6,5,7]\n\nplt.plot(date, y, linestyle = \"solid\")\nplt.gcf().autofmt_xdate() # gcf (get current figure) autofmt(auto format)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nChanging the format of dates\n\ndate = [\n    datetime (2019,5,24),\n    datetime (2019,5,25),\n    datetime (2019,5,26),\n    datetime (2019,5,27),\n    datetime (2019,5,28),\n    datetime (2019,5,29),\n    datetime (2019,5,30)\n]\n\ny = [0,1,3,4,6,5,7]\n\nplt.plot(date, y, linestyle = \"solid\")\nplt.gcf().autofmt_xdate() \ndate_format = mpl_dates.DateFormatter(\"%d, %b,%Y\")\nplt.gca().xaxis.set_major_formatter(date_format) # gca = get current axis\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n\nUsing the datetime Plot on CSV file\n\ndata = pd.read_csv(\"data/datetime.csv\")\n\n\ndata.head()\n\n\n\n\n\n\n\n\nDate\nOpen\nHigh\nLow\nClose\nAdj Close\nVolume\n\n\n\n\n0\n2019-05-18\n7266.080078\n8281.660156\n7257.259766\n8193.139648\n8193.139648\n723011166\n\n\n1\n2019-05-19\n8193.139648\n8193.139648\n7591.850098\n7998.290039\n7998.290039\n637617163\n\n\n2\n2019-05-20\n7998.290039\n8102.319824\n7807.770020\n7947.930176\n7947.930176\n357803946\n\n\n3\n2019-05-21\n7947.930176\n8033.759766\n7533.660156\n7626.890137\n7626.890137\n424501866\n\n\n4\n2019-05-22\n7626.890137\n7971.259766\n7478.740234\n7876.500000\n7876.500000\n386766321\n\n\n\n\n\n\n\n\nprice_date = data[\"Date\"]\nprice_close = data[\"Close\"]\n\n\nplt.plot(price_date, price_close, linestyle = \"solid\")\nplt.gcf().autofmt_xdate()\nplt.title(\"Bitcoin Prices\")\nplt.xlabel(\"Dates\")\nplt.ylabel(\"Price in (USD)\")\n\nText(0, 0.5, 'Price in (USD)')\n\n\n\n\n\n\n\n\n\n\n# We are making use of pandas to_datetime method\ndata[\"Date\"] = pd.to_datetime(data[\"Date\"])\ndata.sort_values('Date', inplace = True)\nprice_date = data[\"Date\"]\nprice_close = data[\"Close\"]\nplt.plot(price_date, price_close, linestyle = \"solid\")\nplt.gcf().autofmt_xdate()\nplt.title(\"Bitcoin Prices\")\nplt.xlabel(\"Dates\")\nplt.ylabel(\"Price in (USD)\")\n\nText(0, 0.5, 'Price in (USD)')",
    "crumbs": [
      "Home",
      "Bar"
    ]
  }
]